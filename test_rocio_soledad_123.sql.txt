
-- 1. Crea el modelo (revisa bien cuál es el tipo de relación antes de crearlo), respeta las
-- claves primarias, foráneas y tipos de datos. (1 punto)
CREATE TABLE films( id SERIAL PRIMARY KEY, name VARCHAR (255), year INT);

INSERT INTO films (name, year) VALUES ('Daredevil', 2003), ('Thor', 2010), ('The Wolverine', 2013), ('Wakanda Forever', 2022),('Deadpool 2', 2018);

CREATE TABLE tags( id SERIAL PRIMARY KEY, tag VARCHAR(32));

INSERT INTO tags (tag) VALUES('Daredevil de Mark Waid'), ('Love and Thunder'),('saga X-Men '), ('superhéroe Pantera Negra'),('Trilogía');

-- creamos una tabla intermedia 
CREATE TABLE films_tag(
id SERIAL PRIMARY KEY,
films_id INT,
tag_id INT,
FOREIGN KEY ("films_id")
REFERENCES films(id),
FOREIGN KEY ("tag_id")
REFERENCES tags(id));

-- 2. Inserta 5 películas y 5 tags, la primera película tiene que tener 3 tags asociados, la
-- segunda película debe tener dos tags asociados. (1 punto)
INSERT INTO films_tag (films_id, tag_id) VALUES (1,1), (1,2), (1,3), (2,1), (2,2);

-- 3. Cuenta la cantidad de tags que tiene cada película. Si una película no tiene tags debe
-- mostrar 0. (1 punto)
SELECT films.name, COUNT(films_tag.tag_id) FROM films LEFT JOIN films_tag ON films.id = films_tag.films_id GROUP BY films.name;

-- 4. Crea las tablas respetando los nombres, tipos, claves primarias y foráneas y tipos de
-- datos. (1 punto)
-- crear nuestra tabla preguntas
CREATE TABLE questions(
id SERIAL PRIMARY KEY,
question VARCHAR(255),
correct_answer VARCHAR);

-- 2- crear nuestra tabla usuarios 
CREATE TABLE users(
id SERIAL PRIMARY KEY,
name VARCHAR(255),
age INT);

-- 3-vamos a buscar nuestra tabla intermedia 
CREATE TABLE answers(
id SERIAL PRIMARY KEY,
answer VARCHAR(255),
user_id INT,
question_id INT,
FOREIGN KEY ("user_id") REFERENCES users(id) ON DELETE CASCADE,
FOREIGN KEY ("question_id") REFERENCES questions(id));

-- 5. Agrega datos, 5 usuarios y 5 preguntas, la primera pregunta debe estar contestada
-- dos veces correctamente por distintos usuarios, la pregunta 2 debe estar contestada
-- correctamente sólo por un usuario, y las otras 2 respuestas deben estar incorrectas.
-- (1 punto)
-- a. Contestada correctamente significa que la respuesta indicada en la tabla
-- respuestas es exactamente igual al texto indicado en la tabla de preguntas.

-- 1-insertamos a las preguntas
INSERT INTO questions (question, correct_answer)
VALUES ('¿Quién creo la franquicia Pokemon?', 'Satoshi Tajiri'),('¿Cuál fue el primer Pokemon de Ash?', 'Pikachu'),
('¿Cuál es la evolución de Pikachu?', 'Raichu'), ('¿Qué tipo de Pokemon es Charmander?', 'Fuego'),
('¿Cuál es el Pokemon más antiguoa?', 'Arceus');

-- 2-insertamos a los usuarios
INSERT INTO users (name, age)
VALUES ('David', 31),('Peter', 41),('Sully', 27),
 ('Julio', 43), ('Pilar', 60);

-- 3-ahora insertamos respuestas
INSERT INTO answers (answer, question_id, user_id)
VALUES ('Satoshi Tajiri', 1, 1),('Satoshi Tajiri', 1, 2),
('Pikachu', 2, 3), ('Profesor Oak', 3, 4),
('Team Rocket', 4, 5);

-- 6. Cuenta la cantidad de respuestas correctas totales por usuario (independiente de la
-- pregunta). (1 punto)
SELECT users.name, COUNT (answers.answer) AS correct_answer FROM questions
INNER JOIN answers ON questions.id = answers.question_id
INNER JOIN users ON answers.user_id = users.id
WHERE questions.correct_answer = answers.answer GROUP BY users.name;

-- 7. Por cada pregunta, en la tabla preguntas, cuenta cuántos usuarios tuvieron la
-- respuesta correcta. (1 punto)
SELECT questions.question, COUNT (users.id) AS users FROM users
INNER JOIN answers ON users.id = answers.user_id
INNER JOIN questions ON answers.question_id = questions.id
WHERE questions.correct_answer = answers.answer
 GROUP BY questions.question;

-- 8. Implementa borrado en cascada de las respuestas al borrar un usuario y borrar el
-- primer usuario para probar la implementación. (1 punto)
CREATE TABLE answers(
id SERIAL PRIMARY KEY,
answer VARCHAR(255),
user_id INT,
question_id INT,
FOREIGN KEY ("user_id") REFERENCES users(id) ON DELETE CASCADE,
FOREIGN KEY ("question_id") REFERENCES questions(id));
-- Borramos usuario
DELETE FROM users WHERE id=1;
-- comprobamos
SELECT * FROM users;

-- 9. Crea una restricción que impida insertar usuarios menores de 18 años en la base de
-- datos. (1 punto)
ALTER TABLE users ADD CHECK (age>18);
ALTER TABLE

-- 10. Altera la tabla existente de usuarios agregando el campo email con la restricción de
-- único. (1 punto)
ALTER TABLE users ADD COLUMN email VARCHAR UNIQUE;
SELECT * FROM users;





